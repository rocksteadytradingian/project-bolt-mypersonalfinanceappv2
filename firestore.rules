rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to validate data structure
    function isValidUserProfile(data) {
      return data.keys().hasAll(['email', 'displayName']) &&
             data.email is string &&
             data.displayName is string;
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated() and isOwner(userId);
      allow create: if isAuthenticated() and 
                    isOwner(userId) and 
                    isValidUserProfile(request.resource.data);
      allow update: if isAuthenticated() and 
                    isOwner(userId) and 
                    (request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['displayName', 'photoURL', 'email']));
    }

    // Transactions
    match /transactions/{transactionId} {
      allow read, write: if isAuthenticated() and isOwner(request.auth.uid);
    }

    // Investments
    match /investments/{investmentId} {
      allow read, write: if isAuthenticated() and isOwner(request.auth.uid);
    }

    // Loans
    match /loans/{loanId} {
      allow read, write: if isAuthenticated() and isOwner(request.auth.uid);
    }

    // Credit Cards
    match /creditCards/{cardId} {
      allow read, write: if isAuthenticated() and isOwner(request.auth.uid);
    }

    // Budget
    match /budgets/{budgetId} {
      allow read, write: if isAuthenticated() and isOwner(request.auth.uid);
    }

    // Fund Sources
    match /fundSources/{sourceId} {
      allow read, write: if isAuthenticated() and isOwner(request.auth.uid);
    }

    // Recurring Transactions
    match /recurringTransactions/{transactionId} {
      allow read, write: if isAuthenticated() and isOwner(request.auth.uid);
    }

    // Default secure rules for other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
